# The following is a colletion of useful docker commands and examples...

# Build Docker container:
docker build -t aayre/gsd:test-image .
docker build --no-cache -t aayre/gsd:test-image .
docker build --no-cache -t testapp:test-image .

# Run Docker container disconnected (25785 is host port, 8080 is port within container)
docker container run -d --name [container-name] -p 25785:8080 aayre/gsd:test-image
docker container run -d --name [container-name] -p 25785:8080 aayre/gsd:test-image

# Push Docker container:
docker image push aayre/gsd:test-image
docker image push [username]/[repo]:[image-name]

# Stop container:
docker container stop [container-name]

# Start container:
docker start [container-name]

# Start container interactivly:
docker start -i [container-name]

# Delete container:
docker container rm [container-name]

# List containers:
docker container ls -a

# Run container shell (sh) interactivly (-it) example:
docker container run -it --name test alpine sh

# Ctrl-P-Q leave interactive container, but leave it running

docker pull ghcr.io/osgeo/gdal:alpine-small-latest
docker container run -it --name gdal ghcr.io/osgeo/gdal:alpine-small-latest

docker container run -it -v /c/Users/AndrewAyre/gdal-data:/mnt --name gdal ghcr.io/osgeo/gdal:alpine-small-latest

docker container run -d --name [container-name] -p 25785:7183 testapp:test-image

docker container run -d --name testapp -p 25785:7183 testapp:test-image

docker start -i testapp:test-image

docker container run -it --name testapp testapp:test-image

#=================================================================================================================
# Commands used:

docker build --no-cache -t testapp:test-image .
docker container run -d --name testapp -p 25785:5000 testapp:test-image

docker build --no-cache -t gdal-ubuntu-aspnetcore-8.0-sdk .
docker build --no-cache -t gdal-ubuntu-aspnetcore-8.0-runtime .

#=================================================================================================================
# Dockerfile contexts:

FROM ghcr.io/osgeo/gdal:ubuntu-small-latest

RUN apt-get update
RUN apt-get upgrade

RUN apt-get install -y ca-certificates
RUN apt-get install -y libc6
RUN apt-get install -y libgcc-s1
RUN apt-get install -y libicu74
RUN apt-get install -y liblttng-ust1
RUN apt-get install -y libssl3
RUN apt-get install -y libstdc++6
RUN apt-get install -y libunwind8
RUN apt-get install -y zlib1g

# RUN apt-get install -y aspnetcore-runtime-8.0
RUN apt-get install -y dotnet-sdk-8.0

RUN mkdir -p /app

WORKDIR /app

COPY ./bin/Release/net8.0/publish .

EXPOSE 5000

ENTRYPOINT ["dotnet", "TestDockerApi.dll"]
# ENTRYPOINT ["/bin/bash"]

#=================================================================================================================
# Dockerfile generated by VS2022

# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:8.0-noble AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:8.0-noble AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["TestDockerApi.csproj", "."]
RUN dotnet restore "./TestDockerApi.csproj"
COPY . .
WORKDIR "/src/."
RUN dotnet build "./TestDockerApi.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./TestDockerApi.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "TestDockerApi.dll"]

